name: Deploy to ECS

on:
  push:
    branches: ['main']
  workflow_dispatch:

jobs:
  deploy_to_ecs:
    runs-on: ubuntu-latest
    environment: production

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Fetch all branches
        run: git fetch origin

      - name: Ensure main branch exists
        run: |
          if git show-ref --verify --quiet refs/heads/main; then
            echo "Branch main exists locally"
          else
            echo "Branch main doesn't exist locally. Creating it."
            git checkout -b main origin/main
          fi

      - name: Checkout main branch
        run: git checkout main

      - name: Pull latest changes from main
        run: git pull origin main

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'

      - name: Install dependencies
        run: npm install --legacy-peer-deps

      - name: Determine affected projects
        id: affected
        run: |
          echo "Running Nx command..."
          npx nx reset
          npx nx show projects --affected --type=app --base=main -- --verbose > affected.txt
          echo "Nx command completed with exit code $?."
          cat affected.txt

      - name: Check for affected projects
        run: |
          if [ ! -s affected.txt ]; then
            echo "Nenhum projeto afetado foi encontrado. Falhando o job."
            exit 1
          fi

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Build, tag, and push images for affected projects
        if: success()
        run: |
          # Define single repository in ECR
          ECR_REGISTRY="${{ steps.login-ecr.outputs.registry }}"
          ECR_REPOSITORY="${{ secrets.ECR_REPOSITORY }}"  # Nome fixo do repositÃ³rio ECR
          IMAGE_TAG="${{ github.sha }}"  # Use o SHA do commit como tag para garantir unicidade

          # For each app, build and push the image
          while IFS= read -r app; do
            echo "Building and pushing Docker image for project: $app"

            # Build the image using the app-specific Dockerfile
            docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$app-$IMAGE_TAG -f ./configs/docker/Dockerfile.$app .

            # Push the image to the ECR repository
            docker push $ECR_REGISTRY/$ECR_REPOSITORY:$app-$IMAGE_TAG

            # Set the environment variable with the image name for later use
            echo "image=$ECR_REGISTRY/$ECR_REPOSITORY:$app-$IMAGE_TAG" >> $GITHUB_ENV
          done < affected.txt

      - name: Check if task definition exists
        id: task-exists
        run: |
          aws ecs describe-task-definition --task-definition ${{ secrets.ECS_TASK_DEFINITION_NAME }} > task-definition.json || echo "Task definition does not exist"

      - name: Register or update task definition
        id: register-update-task
        run: |
          # Check if the task already exists (from the previous step)
          TASK_EXISTS=$(jq 'has("taskDefinitionArn")' task-definition.json)

          if [ "$TASK_EXISTS" == "true" ]; then
            echo "Updating existing task definition..."

            # Update the existing task definition with the new image
            aws ecs update-service \
              --cluster ${{ secrets.ECS_CLUSTER }} \
              --service ${{ secrets.ECS_SERVICE }} \
              --task-definition ${{ secrets.ECS_TASK_DEFINITION_NAME }} \
              --force-new-deployment
          else
            echo "Registering new task definition..."

            # Registering a new task definition
            aws ecs register-task-definition \
              --family ${{ secrets.ECS_TASK_DEFINITION_NAME }} \
              --container-definitions "[
                {
                  \"name\": \"${{ secrets.CONTAINER_NAME }}\",
                  \"image\": \"${{ env.image }}\",
                  \"memory\": 512,
                  \"cpu\": 256,
                  \"essential\": true,
                  \"portMappings\": [
                    {
                      \"containerPort\": 80,
                      \"hostPort\": 80
                    }
                  ],
                  \"logConfiguration\": {
                    \"logDriver\": \"awslogs\",
                    \"options\": {
                      \"awslogs-group\": \"/ecs/pure-pages-family\",
                      \"awslogs-region\": \"sa-east-1\",
                      \"awslogs-stream-prefix\": \"ecs\"
                    }
                  }
                }
              ]"
          fi

      - name: Deploy ECS task definition
        if: success()
        run: |
          # If the task has been updated or registered, deploy it
          aws ecs update-service \
            --cluster ${{ secrets.ECS_CLUSTER }} \
            --service ${{ secrets.ECS_SERVICE }} \
            --task-definition ${{ secrets.ECS_TASK_DEFINITION_NAME }} \
            --force-new-deployment \
            --region ${{ secrets.AWS_REGION }}
